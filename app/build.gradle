plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'androidx.navigation.safeargs.kotlin'
}
apply from: "$rootDir/dependencies.gradle"
apply from: "$rootDir/spotless.gradle"

android {
    compileSdkVersion versions.compileSdk
    defaultConfig {
        applicationId "adams.sheek.rapcloud"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode versions.versionCode
        versionName versions.versionName
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "adams.sheek.rapcloud.AppTestRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation" : "$projectDir/schemas".toString()]
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        dataBinding true
//        viewBinding true
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
        test.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.time.ExperimentalTime"]
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    }
}


dependencies {

//    Ù”NOTE : Not all dependencies are used in the current project, but we need them all to start a perfect project


//    multi dex
    implementation "androidx.multidex:multidex:$versions.multidex_version"

    // android supports
    implementation "com.google.android.material:material:$versions.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintVersion"

    // architecture components
    implementation "androidx.fragment:fragment-ktx:$versions.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$versions.lifecycleVersion"
    implementation "androidx.room:room-runtime:$versions.roomVersion"
    implementation "androidx.room:room-ktx:$versions.roomVersion"
    kapt "androidx.room:room-compiler:$versions.roomVersion"
//    testImplementation "androidx.arch.core:core-testing:$versions.archCompomentVersion"

    // binding
    implementation ("com.github.skydoves:bindables:$versions.bindablesVersion") {
        exclude group: "com.google.android.material"
    }

    // startup
//    implementation "androidx.startup:startup-runtime:$versions.startupVersion"

    // hilt
    implementation "com.google.dagger:hilt-android:$versions.hiltCoreVersion"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.3.1'
    kapt "com.google.dagger:hilt-compiler:$versions.hiltCoreVersion"
    kapt "androidx.hilt:hilt-compiler:$versions.hiltVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$versions.hiltCoreVersion"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$versions.hiltCoreVersion"

    // network
    implementation "com.github.skydoves:sandwich:$versions.sandwichVersion"
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttpVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttpVersion"

    // moshi
    implementation "com.squareup.moshi:moshi-kotlin:$versions.moshiVersion"
    annotationProcessor "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshiVersion"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutinesVersion"

    // whatIf
    implementation "com.github.skydoves:whatif:$versions.whatIfVersion"

    // glide
    implementation "com.github.bumptech.glide:glide:$versions.glideVersion"
    implementation "com.github.florent37:glidepalette:$versions.glidePaletteVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$versions.glideVersion"

    // bundler
//    implementation "com.github.skydoves:bundler:$versions.bundlerVersion"

    // transformation
//    implementation "com.github.skydoves:transformationlayout:$versions.transformationLayout"

    // recyclerView
//    implementation "androidx.recyclerview:recyclerview:$versions.recyclerView"
//    implementation "com.github.skydoves:baserecyclerviewadapter:$versions.baseAdapter"

    // gradation
//    implementation "com.github.skydoves:rainbow:$versions.rainbowVersion"

    // custom views
//    implementation "com.github.skydoves:androidribbon:$versions.androidRibbonVersion"
//    implementation "com.github.skydoves:progressview:$versions.progressViewVersion"

    // debugging
    implementation "com.jakewharton.timber:timber:$versions.timberVersion"

    //navigation component
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.nav_version"


    //firebase
    implementation platform("com.google.firebase:firebase-bom:$versions.firebase_bom")
    implementation "com.google.firebase:firebase-analytics-ktx"
    implementation "com.google.firebase:firebase-auth-ktx"
    implementation 'com.google.firebase:firebase-dynamic-links-ktx'
    implementation "com.google.android.gms:play-services-auth:$versions.play_services_auth"

    //exoplayer
    implementation "com.google.android.exoplayer:exoplayer:$versions.exoplayer"
    implementation "com.google.android.exoplayer:exoplayer-core:$versions.exoplayer"

    //data store
    implementation "androidx.datastore:datastore-preferences:$versions.data_store"


    // unit test
    testImplementation "junit:junit:$versions.junitVersion"
    testImplementation "androidx.test:core:$versions.androidxTest"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockitoKotlinVersion"
    testImplementation "org.mockito:mockito-inline:$versions.mockitoInlineVersion"
    testImplementation "app.cash.turbine:turbine:$versions.turbineVersion"
    testImplementation "org.robolectric:robolectric:$versions.robolectricVersion"
    androidTestImplementation "com.google.truth:truth:$versions.truthVersion"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidxTestJunit"
    androidTestImplementation "com.android.support.test:runner:$versions.androidTestRunner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espressoVersion"
}